@inject ILanguageService LanguageService
@inject DialogService DialogService

<RadzenStack>
    <RadzenRow>
        <RadzenColumn Size="6">
            <RadzenFieldset Text=@text["crossSection"]>
                <RadzenRadioButtonList TValue="CrossSectionType" @bind-Value="CrossSectionType" Orientation="Orientation.Vertical">
                    <Items>
                        <RadzenRadioButtonListItem Value="CrossSectionType.Square" Text=@text["square"] />
                        <RadzenRadioButtonListItem Value="CrossSectionType.SquareStandingOnCorner" Text=@text["squareCorner"] />
                        <RadzenRadioButtonListItem Value="CrossSectionType.HollowSquare" Text=@text["hollowSquare"] />
                        <RadzenRadioButtonListItem Value="CrossSectionType.HollowSquareStandingOnCorner" Text=@text["hollowSquareCorner"] />
                        <RadzenRadioButtonListItem Value="CrossSectionType.Rectangle" Text=@text["rectangle"] />
                        <RadzenRadioButtonListItem Value="CrossSectionType.Circle" Text=@text["circle"] />
                        <RadzenRadioButtonListItem Value="CrossSectionType.ThickPipe" Text=@text["thickPipe"] />
                        <RadzenRadioButtonListItem Value="CrossSectionType.ThinPipe" Text=@text["thinPipe"] />
                        <RadzenRadioButtonListItem Value="CrossSectionType.Custom" Text=@text["custom"] />
                    </Items>
                </RadzenRadioButtonList>
            </RadzenFieldset>
        </RadzenColumn>
        <RadzenColumn Size="6">
            <RadzenFieldset Text=@text["params"]>
                <RadzenStack Orientation="Orientation.Vertical" Gap="10">
                    <RadzenFormField Text=@text["from"]>
                        <RadzenNumeric TValue="double" @bind-Value=From Min="0" Step="0.1" />
                    </RadzenFormField>
                    <RadzenFormField Text=@dimension1Name>
                        <RadzenNumeric TValue="double" @bind-Value=dimension1 Min="0" Step="1" Change="OnDimensionChanged" />
                    </RadzenFormField>
                    @if (!string.IsNullOrEmpty(dimension2Name))
                    {
                        <RadzenFormField Text=@dimension2Name>
                            <RadzenNumeric TValue="double" @bind-Value=dimension2 Min="0" Step="1" Change="OnDimensionChanged" />
                        </RadzenFormField>
                    }
                    <RadzenLabel Text=@($"{text["value"]} {Value} mm^3") />
                </RadzenStack>
            </RadzenFieldset>
        </RadzenColumn>
    </RadzenRow>
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenButton Text=@text["cancel"] Click=@DialogService.Close />
        <RadzenButton Text=@(IsCreated ? text["add"] : text["edit"]) Click=@(async () =>
                {
                    if (double.IsNaN(Value))
                        await DialogService.Alert(text["modulusValid"]);
                    else if (Value <= 0)
                        await DialogService.Alert(text["modulusPositive"]);
                    else
                    {
                        Modulus modulus = new() { From = From, Value = Value };
                        await OnModulusAdded.InvokeAsync(modulus);
                        DialogService.Close();
                    }
                }) />
    </RadzenStack>
</RadzenStack>



@code {
    [Parameter]
    public required string Lang { get; set; }

    [Parameter]
    public bool IsCreated { get; set; }

    [Parameter]
    public double From { get => modulusFrom; set => modulusFrom = value; }

    [Parameter]
    public double Value { get => modulusValue; set => modulusValue = value; }

    [Parameter]
    public EventCallback<Modulus> OnModulusAdded { get; set; }

    private CrossSectionType crossSectionType = CrossSectionType.Custom;
    private string dimension1Name = string.Empty;
    private string dimension2Name = string.Empty;
    private double dimension1 = 0;
    private double dimension2 = 0;
    private double modulusFrom;
    private double modulusValue;

    private Dictionary<string, string> text;

    protected override void OnInitialized()
    {
        text = LanguageService.GetLocalizedStrings($"{Constants.LocalizationFileBasePath}ModulusDialog.csv", Lang ?? Constants.SupportedLanguages[0]);
        SetDimensionNames();
        dimension1 = Value;
    }

    private CrossSectionType CrossSectionType
    {
        get => crossSectionType;
        set
        {
            if (crossSectionType != value)
            {
                crossSectionType = value;
                OnCrossSectionTypeChanged();
            }
        }
    }

    private void SetDimensionNames()
    {
        switch (crossSectionType)
        {
            case CrossSectionType.Square:
            case CrossSectionType.SquareStandingOnCorner:
                dimension1Name = text["side"];
                dimension2Name = string.Empty;
                break;
            case CrossSectionType.HollowSquare:
            case CrossSectionType.HollowSquareStandingOnCorner:
                dimension1Name = text["outerSide"];
                dimension2Name = text["innerSide"];
                break;
            case CrossSectionType.Rectangle:
                dimension1Name = text["width"];
                dimension2Name = text["height"];
                break;
            case CrossSectionType.Circle:
                dimension1Name = text["diameter"];
                dimension2Name = string.Empty;
                break;
            case CrossSectionType.ThickPipe:
                dimension1Name = text["outerDiameter"];
                dimension2Name = text["innerDiameter"];
                break;
            case CrossSectionType.ThinPipe:
                dimension1Name = text["outerDiameter"];
                dimension2Name = text["wall"];
                break;
            case CrossSectionType.Custom:
                dimension1Name = text["valueMm3"];
                dimension2Name = string.Empty;
                break;
        }
    }

    private double CalculateModulus(double dimension1, double dimension2)
    {
        switch (crossSectionType)
        {
            case CrossSectionType.Square:
                return Math.Pow(dimension1, 3) / 6;
            case CrossSectionType.SquareStandingOnCorner:
                return Math.Pow(dimension1, 3) * Math.Sqrt(2) / 12;
            case CrossSectionType.HollowSquare:
                return (Math.Pow(dimension1, 4) - Math.Pow(dimension2, 4)) / (6 * dimension1);
            case CrossSectionType.HollowSquareStandingOnCorner:
                return (Math.Pow(dimension1, 4) - Math.Pow(dimension2, 4)) * Math.Sqrt(2) / (12 * dimension1);
            case CrossSectionType.Rectangle:
                return dimension1 * Math.Pow(dimension2, 2) / 6;
            case CrossSectionType.Circle:
                return Math.PI * Math.Pow(dimension1, 3) / 32;
            case CrossSectionType.ThickPipe:
                return Math.PI * (Math.Pow(dimension1, 4) - Math.Pow(dimension2, 4)) / (32 * dimension1);
            case CrossSectionType.ThinPipe:
                return Math.PI * Math.Pow(dimension1, 2) * dimension2 / 4;
            case CrossSectionType.Custom:
                return dimension1;
            default:
                return 0;
        }
    }

    private void OnCrossSectionTypeChanged()
    {
        SetDimensionNames();
        Value = CalculateModulus(dimension1, dimension2);
    }

    private void OnDimensionChanged()
    {
        Value = CalculateModulus(dimension1, dimension2);
    }
}
